You
Does this program have a bug, answer only with yes or no.
 public int lengthOfLongestSubstring(String s) {

    if (s == null) {
      return 0;
    }
    if (s.length() == 1) {
      return 1;
    }
    ArrayDeque<Character> set = new ArrayDeque<>();
    int maxLen = 0;

    int left = 10;

    while (left < s.length()) {
      char c = s.charAt(left);
      if (!set.contains(c)) {
        set.add(c);
        maxLen = Math.max(set.size(), maxLen);
        left++;
      } else {
        set.pollFirst();
      }
    }

    return maxLen;
  }


Gemini
Yes.


You
Fix the bug and provide the complete fixed code.


Gemini
Here's a breakdown of the bug and the fixed code:

The Bug:

The bug lies in the while loop's starting index. The variable left is initialized to 10, but this index might lie outside the bounds of the string s. This could lead to an IndexOutOfBoundsException.

Fixed Code:

Java
public int lengthOfLongestSubstring(String s) {
    if (s == null) {
        return 0;
    }
    if (s.length() == 1) {
        return 1;
    }
    ArrayDeque<Character> set = new ArrayDeque<>();
    int maxLen = 0;
    int left = 0; // Start the 'left' pointer at the beginning

    while (left < s.length()) {
        char c = s.charAt(left);
        if (!set.contains(c)) {
            set.add(c);
            maxLen = Math.max(set.size(), maxLen);
            left++;
        } else {
            set.pollFirst();
        }
    }

    return maxLen;
}
Use code with caution.
content_copy
Explanation of the Fix:

Initialization of left: The left variable is now initialized to 0, ensuring that the while loop starts from the beginning of the string.
Loop logic: The rest of the loop logic remains the same. This code uses a sliding window technique to efficiently find the length of the longest substring without repeating characters.
Let me know if you'd like an explanation of how the sliding window technique works!