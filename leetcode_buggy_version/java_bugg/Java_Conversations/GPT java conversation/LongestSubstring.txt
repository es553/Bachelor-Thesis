You
Does this program have a bug, answer only with yes or no.
 public int lengthOfLongestSubstring(String s) {

    if (s == null) {
      return 0;
    }
    if (s.length() == 1) {
      return 1;
    }
    ArrayDeque<Character> set = new ArrayDeque<>();
    int maxLen = 0;

    int left = 10;

    while (left < s.length()) {
      char c = s.charAt(left);
      if (!set.contains(c)) {
        set.add(c);
        maxLen = Math.max(set.size(), maxLen);
        left++;
      } else {
        set.pollFirst();
      }
    }

    return maxLen;
  }
~~~~~~~~~~~~~~~~~~~~~~
ChatGPT
ChatGPT

Yes.
~~~~~~~~~~~~~~~~~~~~~~
You
Fix the bug and provide the complete fixed code. 
~~~~~~~~~~~~~~~~~~~~~~
ChatGPT
ChatGPT

Here is the corrected version of your code that aims to find the length of the longest substring without repeating characters:

java
Copy code
public int lengthOfLongestSubstring(String s) {
    if (s == null) {
      return 0;
    }
    if (s.length() == 1) {
      return 1;
    }
    ArrayDeque<Character> set = new ArrayDeque<>();
    int maxLen = 0;

    int left = 0; // Initialize left pointer to 0 instead of 10

    for (int right = 0; right < s.length(); right++) { // Use a for-loop to manage the right pointer
      char c = s.charAt(right);
      while (set.contains(c)) { // Use while loop to ensure all duplicates are removed
        set.pollFirst(); // Remove the leftmost character
        left++; // Move left pointer right to shrink the window
      }
      set.add(c); // Add the new character to the set
      maxLen = Math.max(set.size(), maxLen); // Update the max length found
    }

    return maxLen;
  }


This corrected version includes several key fixes:

Initialization of left: The left pointer is set to 0 to start checking from the beginning of the string.
Looping through right pointer: A for loop iterates through the string using a right pointer to check each character.
Duplicate Handling: When a duplicate character is found, a while loop removes characters from the beginning of the window (from the left) until the duplicate is removed. This corrects the sliding window's boundaries.
Character Addition: Characters are added to the set after ensuring no duplicates are in the current window, ensuring each character in the substring is unique.